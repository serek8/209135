\documentclass[11pt]{article}
\usepackage[top=1in, bottom=0.5in, left=1in, right=1in]{geometry}
\usepackage[T1]{fontenc}
\usepackage[polish]{babel}
\usepackage[utf8]{inputenc}
\usepackage{lmodern}
\selectlanguage{polish}
\usepackage{graphicx}
\begin{document}
\title{Laboratorium 9}
\author{Jan Seredyński}
\maketitle

\section{Wstęp}
Zadaniem laboratorium było przygotowanie algorytmu do znajdowania najkrótszej drogi z jednego elementu do drugiego uzywając procerudy DFS i BFS

\section{Przeszukiwanie w głąb - DFS}
Procedura DFS (ang. Depth First Search - przeszukiwanie najpierw w głąb) rozpoczyna działanie w wybranym wierzchołku grafu, który oznacza jako odwiedzony. Następnie przechodzi wzdłuż dostępnej krawędzi do sąsiada tego wierzchołka, który nie został jeszcze odwiedzony. Przechodzenie jest kontynuowane dalej (w głąb grafu), aż zostanie osiągnięty wierzchołek, który nie posiada nie odwiedzonych sąsiadów. Wtedy procedura wraca do poprzednio odwiedzonego wierzchołka i kontynuuje wzdłuż kolejnej dostępnej krawędzi.


\section{Przeszukiwanie szerz - BFS}
Przeszukiwanie w szerz wykorzystuje implmementację kolejki aby przechodzić równorzędnie po każdym elemencie. Tzn. sprawdzany jest pojedyńczo każdy kolejny element z każdej gałęzi, co można wizualizacyjnie określić jako przeszukiwanie w szerz.


\section{Podsumowanie}
Obydwie procedury mają swoje zalety oraz wady. Przeszukiwanie w szerz BFS pozwala na sprawniejsze znalezienie najkrótszej ścieżki do danego elementu, ponieważ nie zacznie przeszukiwania w głąb niepotrzebnych gałęzi, w których na pewno nie ma rozwiązania.Również radzi sobie lepiej gdy istnieje więcej niż jedno rozwiązanie i znajdzie je w minimalnej liczbie kroków.
Jednak ten algorytm wymaga zużycia bardzo dużej ilości pamięci aby przejs na następny poziom w grafie. Jednak gdy rozwiązanie jest bardzo oddalone to wtedy ten algorytm jest bardzo czasochłonny.///
///
W przeszukiwaniu w szerz zużycie pamięci jest liniowe oraz mniej 
\end{document}